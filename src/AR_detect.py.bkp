#!/usr/bin/env python
import rospy
import tf2_ros
import tf2_geometry_msgs
import tf2_msgs.msg
from ar_track_alvar_msgs.msg import AlvarMarkers
from std_msgs.msg import String, ColorRGBA
from geometry_msgs.msg import PointStamped, Point, Pose, TransformStamped
from visualization_msgs.msg import Marker


landmarks = {1: [-2.60, -5.17, 0],
             2: [-6.05, -5.75, 0],
             3: [-7.93, 18.45, 0],
             4: [-0.23, 9.19, 0],
             5: [-12.3, -6.28, 0],
             6: [18.46, -1.15, 0],
             7: [13.07, -7.09, 0],
             8: [3.05, 17.20, 0],
             9: [-14.82, 1.52, 0],
             10: [-10.74, -15.05, 0],
             11: [18.43, 5.48, 0],
             12: [-4.14, 4.51, 0],
             13: [9.78, 5.39, 0],
             14: [0, 0, 0],
             15: [15.60, -9.14, 0]}
waypoints = {1: [4.2, -4.9, 0],
             2: [-7.7, 0.56 , 0],
             3: [-10.08, 10.32, 0],
             4: [12.5, -1.9, 0]}

class DrawMarker():
    def __init__(self):
        self.fiducial_marker_topic = '/ar_pose_marker'
        self.marker_topic = '/robot_marker'
        self.node_name = 'marker_draw_node'
        self.marker_pub = rospy.Publisher(self.marker_topic, Marker,
                                          queue_size=10)
        self.pub_tf = rospy.Publisher("/tf", tf2_msgs.msg.TFMessage,
                                      queue_size=1)
        self.ar_sub = rospy.Subscriber(self.fiducial_marker_topic,
                                       AlvarMarkers, self.artag_callback)

    def transform_pose(self, input_pose, from_frame, to_frame):
        tf_buffer = tf2_ros.Buffer()
        listener = tf2_ros.TransformListener(tf_buffer)
        # pose_stamped = tf2_geometry_msgs.PoseStamped()
        pose_stamped = input_pose
        # pose_stamped.pose = input_pose
        pose_stamped.header.frame_id = from_frame
        pose_stamped.header.stamp = rospy.Time.now()
        try:
            # ** It is important to wait for the listener to start listening.
            # Hence the rospy.Duration(1)
            output_pose_stamped = tf_buffer.transform(pose_stamped, to_frame,
                                                      rospy.Duration(1))
            return output_pose_stamped.pose
        except (tf2_ros.LookupException, tf2_ros.ConnectivityException,
                tf2_ros.ExtrapolationException):
            raise

    def draw_mark(self, marker_pose, id, marker_type="landmark"):
        if marker_type == "landmark":
            color_rgba = ColorRGBA(1.0, 0.0, 0.0, 1.0)  # Red
        else:
            color_rgba = ColorRGBA(0.0, 1.0, 0.0, 1.0)  # Green

        robotMarker = Marker()
        robotMarker.header.frame_id = "/base_footprint"
        robotMarker.header.stamp = rospy.get_rostime()
        robotMarker.ns = "robot"
        robotMarker.id = id
        robotMarker.type = 2
        robotMarker.action = 0
        robotMarker.pose = marker_pose
        robotMarker.scale.x = 1.0
        robotMarker.scale.y = 1.0
        robotMarker.scale.z = 1.0
        robotMarker.color = color_rgba
        robotMarker.lifetime = rospy.Duration(0)
        self.marker_pub.publish(robotMarker)

    def connector(self, ar_frame, lm_frame):

        print("connector...")
        tf_buffer = tf2_ros.Buffer()
        listener = tf2_ros.TransformListener(tf_buffer)

        (trans, rot) = tf_buffer.lookup_transform('zed2_left_camera_optical_frame', ar_frame, rospy.Time(0))
        try:
            (trans, rot) = tf_buffer.lookup_transform('zed2_left_camera_optical_frame', ar_frame, rospy.Time(0))
            print("lookup_transform...")
            t = TransformStamped()
            t.header.frame_id = 'zed2_left_camera_optical_frame'
            t.header.stamp = rospy.Time.now()
            t.child_frame_id = lm_frame
            t.transform.translation = trans
            t.transform.rotation = rot
            tfm = tf2_msgs.msg.TFMessage([t])
            self.pub_tf.publish(tfm)
        except (tf2_ros.LookupException, tf2_ros.ConnectivityException, tf2_ros.ExtrapolationException):
            pass

    def artag_callback(self, msg):
        # Identify which landmark is associated with the first marker
        try:
            visible_marker_id = msg.markers[0].id
            visible_marker_pose = msg.markers[0].pose
            # visible_marker_pose = self.invert(visible_marker_pose)
            ar_frame = "ar_marker_" + str(visible_marker_id)
            lm_frame = "lm_frame_" + str(visible_marker_id)
            self.connector(ar_frame, lm_frame)

            for id, position in landmarks.items():
                if (id != visible_marker_id):
                    transformed_pose = self.transform_pose(visible_marker_pose,
                                                           lm_frame,
                                                           "lm_frame_"+str(id))
                    self.draw_mark(transformed_pose, id, marker_type="landmark")

            for idx, position in waypoints.items():
                transformed_pose = self.transform_pose(visible_marker_pose,
                                                       lm_frame,
                                                       "wp_frame_"+str(idx))
                self.draw_mark(transformed_pose, idx, marker_type="waypoint")
        except IndexError:
            rospy.logerr("No markers found")


if __name__ == '__main__':
    try:
        md = DrawMarker()
        rospy.init_node(md.node_name, anonymous=False)
        rospy.spin()
    except rospy.ROSInterruptException:
        pass
